---
title: "Quarto Website Demo"
format: gfm
editor: visual
---

## What is Quarto?

Quarto is a publishing system that allows you to weave together content and executable code into a finished document using R, Python, Julia, and ObservableJS, with plans to add more languages. You can thing of Quarto as an extension of R Markdown, but with more features and additional languages. R Markdown is still under active development and is not going anywhere, however many in the data science realm are switching to Quarto instead.

You may notice if you open this lesson in in R Studio, while it is a .qmd document it looks and functions nearly identical to a .Rmd document! Therefore your knowledge of R Markdown is easily transferable to Quarto.

![Artwork from "Hello, Quarto" keynote by Julia Lowndes and Mine Ã‡etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](www/quarto.png){fig-align="center" width="446"}

::: {.alert .alert-info}
Quarto operates as a stand-alone software, however with RStudio v2022.07.1 + Quarto is included, therefore there is no need to separately install Quarto if you have the latest version of RStudio.
:::

## Why build a website in Quarto?

There are plenty of R-based options to create a personal website such as `blogdown` and `distill`, however I've found creating a website in Quarto is more simple/straightforward in terms of file structure and publishing. This is not to say you shouldn't consider the other options! I made [my personal website](https://caitlinmothes.com) in blogdown for example (code can be found [here](https://github.com/ccmothes/personalWebsite)), but this was before Quarto existed and I have since found websites in Quarto to be slightly easier to teach. So that is what we will work through today!

## Getting Started

The structure of Quarto websites is actually nearly identical to that of R Projects (and they actually create an .Rproj file when you create the website). Let's get started:

Go to File -\> New Project -\> New Directory -\> Quarto Website. Name is important here, as it will eventually become the slug (i.e., URL) for your site when we host it with GitHub Pages. Since this is a demo, I will call it 'website-demo'.

::: {.alert .alert-info}
If you already know you want this to be your personal website, **name it your GitHub username**. GitHub Pages creates websites with the **github.io** suffix, and allow you one URL with your username (i.e., **username.github.io**), which is likely the preferred URL you would want to give your personal site.
:::

Leave all the other defaults in the Create Website menu. Once you create the site, you will now notice you are working in an R Project with the site name you just gave it, and see four files in your project directory (*We will get back to these later*).

## Connect to GitHub

We now have a Quarto website project, but it is not yet linked to GitHub (which we will need to host the site). Let's explore a new package here called `usethis` which assists in project workflow management. With this package we can actually create a GitHub repo from an R project (instead of the usual method of creating a repo first and then creating a project).

If you haven't yet, install the package:

```{r}
install.packages("usethis")
```

Then, in the console run the follow line of code. It will prompt you if you want to commit all your files, say Yup. It will then ask if you want to Restart R, say "Absolutely", and click 'Yes' to restart even if prompted that the session is busy.

```{r}
usethis::use_git()
```

You will now notice the 'Git' tab in RStudio, meaning it is connected to Git now, however we haven't synced this to your personal (remote) GitHub repo. To do so, next run this line of code in the console:

```{r}
usethis::use_github()
```

## Configure and Publish with GitHub Pages

First there are some mandatory configurations to set in order to publish with GitHub Pages.

1.  Create a file named `.nojekyll` . Spelling is important! Also note that this creates an empty file that will be hidden in your file directory but it will show up as an untracked file in Git. Open your **terminal** and run the following:

    ```{r}
    touch .nojekyll
    ```

2.  In the YAML header in the `_quarto.yml` file set the `output-dir` to "docs" like this in the first 'project' section at the top under `type: website` :

    ```{r}
    project:
      type: website
      output-dir: docs
    ```

3.  

## Acknowledgements

Thanks to other blogs and Quarto documentation that helped guide this lesson plan, particularly [this wonderful blog](https://ucsb-meds.github.io/creating-quarto-websites/) by Sam Csik.
